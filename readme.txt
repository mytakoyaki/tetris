tetrisアプリ開発仕様書 🎮
このドキュメントは、Claude Codeを使用してWebブラウザで動作するTetrisアプリを開発するための仕様書です。

1. プロジェクト概要
プロジェクト名: ClaudeTetris
コンセプト: テトリス初心者をメインターゲットにした、ポイントとフィーバーモードで運の要素を乗り越えられる新しいテトリス。
ターゲットプラットフォーム: モダンなWebブラウザ (Chrome, Firefox, Safari, Edge)
使用技術スタック:
HTML5
CSS3
JavaScript (ES6+)
2. 画面設計とUIレイアウト
ゲーム画面は主に3つのエリアで構成されます。

左エリア (情報)	中央エリア (ゲーム)	右エリア (情報)
HOLD ブロック表示	ゲームフィールド (10x20グリッド)	SCORE 表示
FEVER GAUGE (フィーバー突入までのカウンター)		POINTS (所持ポイント) 表示
NEXT ブロック表示

Google スプレッドシートにエクスポート
画面遷移
スタート画面:
ゲームタイトル
「START GAME」ボタン
ゲーム画面:
上記のレイアウトでゲームをプレイ。
EキーでNEXTブロック交換が可能。
ゲームオーバー画面:
「GAME OVER」テキスト
最終スコア表示
「PLAY AGAIN」ボタン
3. ゲームの基本仕様
基本的なゲームルールはクラシックなテトリスに準拠しますが、一部のルールは独自のコアメカニクスによって補完・拡張されます。

ゲームフィールド: 10 (幅) x 20 (高さ) のグリッド。
テトリミノ (ブロック): I, O, T, S, Z, J, L の7種類。
操作方法:
← キー: 左に1マス移動
→ キー: 右に1マス移動
↓ キー: ソフトドロップ
↑ キー: 右回転
スペース キー: ハードドロップ
C キー: ホールド機能
E キー: NEXTブロック交換 (独自仕様)
基本スコア計算:
1ライン消去: 100点
2ライン消去: 300点
3ライン消去: 500点
4ライン消去 (Tetris): 800点
※このスコアはフィーバーモード中に2倍になります。
4. ゲームのコアメカニクス：ポイント＆エクスチェンジ
このゲームの最大の特徴は、ブロックを置くことで貯まる「ポイント」を使い、次に落ちてくるブロックを交換できる「エクスチェンジ」機能です。これにより、従来のテトリスが持つ運の要素をプレイヤーの戦略で乗り越えることができます。

4.1. ポイントシステム
コンセプト: プレイする全ての行動が、未来の自分を助ける力になる。
ポイント獲得条件:
ブロックを1つ、フィールドに正常に固定（設置）するたびにポイントを獲得します。
獲得ポイント:
1ブロック設置につき 10ポイント
4.2. NEXTブロック交換 (エクスチェンジ)
コンセプト: 運命を自分の手で変える。
機能:
ポイントを消費して、「NEXT（次に落ちてくるブロック）」を別のランダムなブロックに交換できます。
操作方法:
E キー（Exchange）を押すことで発動。
消費ポイント:
1回の交換につき 30ポイント （ブロック3個分の設置に相当）。より手軽に交換可能です。
UI要件:
現在の所持ポイントを常に画面に表示する。
交換キーのヒントの近くに「-30P」のように消費ポイントを表示すると親切。
4.3. フィーバーモード
コンセプト: 努力が報われる、無敵のボーナスタイム。
突入条件:
ブロックを累計で 30個 設置するごとに自動で発動します。
持続時間:
20秒間
フィーバー中の効果:
エクスチェンジが無料＆無限: この間、ポイントを一切消費せず、何度でもNEXTブロックの交換ができます。
スコアボーナス: フィーバー中に獲得した全てのスコア（ライン消去、ブロック設置など）が 2倍 になります。
視覚的な演出: BGMがアップテンポに変化し、背景エフェクトが派手になり、爽快感を演出します。
UI要C件:
フィーバー突入時、画面中央に「FEVER!」などのテキストを表示。
フィーバーの残り時間を表示するタイマー（ゲージなど）を表示する。
**（推奨）**フィーバー突入までの進捗（あと何個ブロックを置けばよいか）を示すゲージやカウンターがあると、プレイヤーのモチベーションを維持しやすくなります。
**（推奨）**スコア獲得時に「+200 (x2 BONUS!)」のように、ボーナスが適用されていることを視覚的に示すと、より楽しさが増します。

ハードコードをしないこと
同一名の関数や変数を作成しないこと